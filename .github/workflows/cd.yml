name: Continuous Delivery

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

env:
  TAG: ${{ github.sha }}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy-functions-code:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        item: [
          is-uploaded-flag-switch
        ]

    steps:
      # download build /dist artifact 
      # (with both /src (app) and /functions (lambdas))
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: dist

      # uploads Lambda functions to S3
      - name: Upload lambda to S3
        uses: NotCoffee418/s3-zip-upload@v1.4
        env:
          AWS_SECRET_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ml-images-processor-functions
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_MODE: ZIP
          SOURCE_PATH: ./dist/functions/${{ matrix.item }}
          DEST_FILE: ${{ matrix.item }}.zip

  deploy-cloudformation:
    needs: deploy-functions-code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ml-images-processor-cf-stack
          template: build-template.yml

  deploy-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # download build /dist artifact 
      # (with both /src (app) and /functions (lambdas))
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: dist

      # create .env file with DB credentials (stored in GH secrets) 
      # since it's needed for app start
      - name: Create .env file
        run: |
          echo "PORT=${{ secrets.APP_PORT }}" >> .env
          echo "BUCKET=${{ secrets.AWS_BUCKET }}" >> .env
          echo "PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}" >> .env
          echo "PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env
          echo "PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}" >> .env
          echo "PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}" >> .env
          echo "PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}" >> .env

      - name: Build Docker image
        run: docker build . -t "${{ secrets.REPOSITORY_NAME }}" -f Dockerfile.production

      - name: Tag Docker image
        run: docker tag "${{ secrets.REPOSITORY_NAME }}" "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # remove all existing images for cost savings
      - name: Remove previous images from ECR
        run: |
          image_tags=$(aws ecr list-images --repository-name ${{ secrets.REPOSITORY_NAME }} --query 'imageIds[*].imageTag' --region ${{ secrets.AWS_REGION }} --output text)
          for tag in $image_tags; do aws ecr batch-delete-image --repository-name ${{ secrets.REPOSITORY_NAME }} --region ${{ secrets.AWS_REGION }} --image-ids imageTag=$tag > /dev/null; done

      - name: Push Docker image to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
          docker push "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"

      - name: SSH into EC2 instance and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: |
            TAG=${TAG}

          script: |
            echo "AWS CLI version: $(aws --version)"
            echo "Docker version: $(docker --version)"

            docker system prune -f
            docker rm -vf $(docker ps -aq)
            docker rmi -f $(docker images -aq)

            echo "Logging in to ECR...."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
            echo "Logged in successful..."

            echo "Pulling image from ECR..."
            echo "Docker pull command: docker pull \"${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${{ env.TAG }}\""
            echo "Docker pull completed..."

            echo "Running the container..."
            echo 'docker run -d -p "${{ secrets.APP_PORT }}:${{ secrets.APP_PORT }}" "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${{ env.TAG }}"'
            docker run -d -p "${{ secrets.APP_PORT }}:${{ secrets.APP_PORT }}" "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${{ env.TAG }}"
